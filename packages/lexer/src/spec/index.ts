const spec = {
  multilineComment: { match: /\/\*[^]*?\*\//, lineBreaks: true },
  singlelineComment: { match: /\/\/.*/, lineBreaks: true },
  keyword: [
    'def',
    'fn',
    'if',
    'else',
    'while',
    'for',
    'class',
    'extends',
    'new',
    'match',
    'return'
  ],
  nativeFn: [
    'int',
    'print',
    'println',
    'exit',
    'log',
    'assert',
    'assertEq',
    'assertGt',
    'assertLt',
    'assertGte',
    'assertLte',
    'assertTruthy',
    'assertFalsy',
    'assertThrows',
    'assertNotThrows',
    'length',
    'at',
    'push',
    'pop',
    'remove',
    'keys',
    'values',
    'shift',
    'unshift',
    'includes',
    'slice',
    'splice',
    'concat',
    'reverse',
    'sort',
    'join',
    'split',
    'trim',
    'set',
    'has',
    'get',
    'del',
    'writeFile',
    'readFile',
    'trimStart',
    'trimEnd',
    'replace',
    'replaceAll',
    'toLowerCase',
    'toUpperCase',
    'charAt',
    'charCodeAt',
    'codePointAt',
    'padEnd',
    'padStart',
    'repeat',
    'startsWith',
    'endsWith',
    'find',
    'findIndex',
    'indexOf',
    'lastIndexOf',
    'map',
    'filter',
    'reduce',
    'reduceRight',
    'some',
    'every',
    'fill',
    'copyWithin',
    'js',
    'sqrt'
  ],
  return: 'return',
  jsCode: { match: /\$[^]*?\$/, lineBreaks: true },
  constructor: /\.init/,
  methodAccess: /(?:\.[a-zA-Z_][a-zA-Z0-9_]*)+/,
  binary: /0b[01]+/,
  hex: /0x[0-9a-fA-F]+/,
  boolean: ['true', 'false'],
  number: /0|[1-9][0-9]*/,
  string: /"(?:\\["\\]|[^\n"\\])*"/,
  hash: '#',
  lp: '(',
  rp: ')',
  lb: '{',
  rb: '}',
  lbk: '[',
  rbk: ']',
  comma: ',',
  colon: ':',
  semicolon: ';',
  dot: '.',
  operator: [
    '!',
    '~',
    '++',
    '--',
    '+',
    '-',
    '**',
    '*',
    '/',
    '%',
    '^',
    '>',
    '<',
    '>=',
    '<=',
    '==',
    '!=',
    '&&',
    '||',
    '??',
    '>>',
    '<<',
    '>>>'
  ],
  identifier: /[a-zA-Z_][a-zA-Z0-9_]*/,
  ws: { match: /\s+/, lineBreaks: true },
  nl: { match: /\n/, lineBreaks: true }
};

export default spec;
